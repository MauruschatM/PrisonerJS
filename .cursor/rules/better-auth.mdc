---
description: Authentication with better auth
alwaysApply: false
---

# Better Auth + Drizzle ORM Rules

## Project Context

This project uses Better Auth with Drizzle ORM for authentication in a Next.js application with TypeScript and HeroUI components.

## Better Auth Core Principles

### 1. Authentication Setup

- Always use `betterAuth()` with `drizzleAdapter()` for database integration
- Configure email/password authentication with proper validation
- Use environment variables for secrets and URLs
- Enable cookie cache for better performance

```typescript
// config/auth.ts
import { betterAuth } from "better-auth";
import { drizzleAdapter } from "better-auth/adapters/drizzle";
import { db } from "@/lib/db";

export const auth = betterAuth({
  database: drizzleAdapter(db, { provider: "sqlite" }),
  emailAndPassword: { enabled: true },
  session: {
    expiresIn: 60 * 60 * 24 * 7, // 7 days
    cookieCache: { enabled: true, maxAge: 60 * 5 },
  },
  secret: process.env.BETTER_AUTH_SECRET,
  baseURL: process.env.BETTER_AUTH_URL,
});
```

### 2. Database Schema (Drizzle)

- Use consistent naming: `user`, `session`, `account`, `verification`
- Include required fields: `id`, `createdAt`, `updatedAt`
- Add proper indexes for performance
- Use foreign key constraints with CASCADE delete

```typescript
// lib/db/schema.ts
import { sqliteTable, text, integer, index } from "drizzle-orm/sqlite-core";

export const user = sqliteTable("user", {
  id: text("id").primaryKey(),
  name: text("name").notNull(),
  email: text("email").notNull().unique(),
  emailVerified: integer("emailVerified", { mode: "boolean" }).default(false),
  createdAt: integer("createdAt", { mode: "timestamp" }).$defaultFn(
    () => new Date()
  ),
  updatedAt: integer("updatedAt", { mode: "timestamp" }).$defaultFn(
    () => new Date()
  ),
});

export const session = sqliteTable("session", {
  id: text("id").primaryKey(),
  token: text("token").notNull().unique(), // REQUIRED for Better Auth
  expiresAt: integer("expiresAt", { mode: "timestamp" }).notNull(),
  userId: text("userId")
    .notNull()
    .references(() => user.id, { onDelete: "cascade" }),
  // ... other fields
});
```

### 3. Client-Side Usage

- Always use `createAuthClient()` with proper baseURL
- Handle window check for SSR compatibility
- Export auth methods from client for consistency

```typescript
// lib/auth-client.ts
import { createAuthClient } from "better-auth/react";

export const authClient = createAuthClient({
  baseURL:
    typeof window !== "undefined"
      ? `${window.location.origin}/api/auth`
      : process.env.BETTER_AUTH_URL || "http://localhost:3000/api/auth",
});

export const { signIn, signUp, signOut, useSession } = authClient;
```

### 4. API Routes

- Create catch-all route: `app/api/auth/[...all]/route.ts`
- Handle both GET and POST methods
- Use proper error handling

```typescript
// app/api/auth/[...all]/route.ts
import { auth } from "@/config/auth";

export async function GET(request: Request) {
  return auth.handler(request);
}

export async function POST(request: Request) {
  return auth.handler(request);
}
```

## Component Patterns

### 1. Authentication Forms

- Use controlled components with state management
- Handle loading states and errors gracefully
- Implement proper form validation
- Use German language for UI text

```typescript
const [loading, setLoading] = useState(false);
const [error, setError] = useState("");

const handleSubmit = async (e: React.FormEvent) => {
  e.preventDefault();
  setLoading(true);
  setError("");

  try {
    const result = await signIn.email({ email, password });
    if (result.error) {
      setError("E-Mail oder Passwort ist falsch");
      return;
    }
    // Success - redirect
    setTimeout(() => (window.location.href = "/"), 100);
  } catch (err) {
    setError("Anmeldung fehlgeschlagen");
  } finally {
    setLoading(false);
  }
};
```

### 2. Session Handling

- Use `useSession()` hook for reactive updates
- Handle loading states with `isPending`
- Check for session existence before rendering

```typescript
const { data: session, isPending } = useSession();

if (isPending) return <div>Lade...</div>;

return session ? (
  <div>Willkommen, {session.user.name}!</div>
) : (
  <div>Bitte melden Sie sich an.</div>
);
```

### 3. Logout Implementation

- Always include timeout for cookie cleanup
- Redirect to home page after logout
- Handle errors gracefully

```typescript
const handleLogout = async () => {
  await signOut();
  setTimeout(() => (window.location.href = "/"), 100);
};
```

## Security Best Practices

### 1. Environment Variables

- Never commit secrets to version control
- Use minimum 32-character secrets
- Set different URLs for production

```env
BETTER_AUTH_SECRET=your-super-secure-32-plus-character-secret
BETTER_AUTH_URL=http://localhost:3000
# Production:
# BETTER_AUTH_URL=https://your-domain.com
```

### 2. Middleware Protection

- Implement route protection in `middleware.ts`
- Check session cookies for performance
- Redirect to auth page for protected routes

```typescript
// middleware.ts
import { NextRequest, NextResponse } from "next/server";

export async function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl;
  const publicRoutes = ["/", "/auth", "/api/auth"];

  if (publicRoutes.some((route) => pathname.startsWith(route))) {
    return NextResponse.next();
  }

  const sessionCookie = request.cookies.get("better-auth.session_token");
  if (!sessionCookie) {
    return NextResponse.redirect(new URL("/auth", request.url));
  }

  return NextResponse.next();
}
```

## Common Patterns

### 1. Error Handling

- Always check for `result.error` in auth operations
- Provide user-friendly German error messages
- Log errors to console for debugging

### 2. Type Safety

- Use Better Auth's type inference: `typeof auth.$Infer.Session`
- Export types from auth config when needed
- Ensure Drizzle schema matches Better Auth expectations

### 3. Performance

- Enable cookie cache in session config
- Use proper database indexes
- Implement WAL mode for SQLite: `sqlite.pragma("journal_mode = WAL")`

## File Structure

```
├── config/
│   └── auth.ts              # Better Auth configuration
├── lib/
│   ├── db/
│   │   ├── index.ts         # Drizzle database instance
│   │   └── schema.ts        # Database schema
│   └── auth-client.ts       # Client-side auth methods
├── app/
│   ├── api/auth/[...all]/
│   │   └── route.ts         # Auth API routes
│   └── auth/
│       └── page.tsx         # Login/Register page
├── middleware.ts            # Route protection
└── drizzle.config.ts        # Drizzle configuration
```

## Commands

- `npm run db:push` - Push schema to database
- `npm run db:studio` - Open Drizzle Studio
- `npm run db:generate` - Generate migrations

## Debugging

- Check browser cookies for session tokens
- Verify database tables exist with correct columns
- Ensure environment variables are loaded
- Check Network tab for API call errors

## Anti-Patterns to Avoid

- ❌ Don't use relative URLs in `createAuthClient()`
- ❌ Don't forget the `token` column in session table
- ❌ Don't use `window.location.reload()` after auth operations
- ❌ Don't skip error handling in auth operations
- ❌ Don't use different database names between config files
  description:
  globs:
  alwaysApply: false

---
